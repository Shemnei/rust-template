# References:
# - https://eugene-babichenko.github.io/blog/2020/05/09/github-actions-cross-platform-auto-releases/
# - https://github.com/BurntSushi/ripgrep/blob/master/.github/workflows/release.yml

name: Release

on:
  push:
    tags:
      - 'v[0-9]+.*'

# Only allow a single release at a time.
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
    steps:
      - name: Get release version
        shell: bash
        if: env.PROJECT_VERSION == ''
        run: |
          # Get the version from github tag
          # See: https://github.community/t5/GitHub-Actions/How-to-get-just-the-tag-name/m-p/32167/highlight/true#M1027
          echo "PROJECT_VERSION=${GITHUB_REF#refs/tags/v}" >> "${GITHUB_ENV}"
          echo "Version: ${{ env.PROJECT_VERSION }}"

      - name: Create release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ env.PROJECT_VERSION }}"
          release_name: ${{ env.PROJECT_VERSION }}

  build-release:
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    env:
      # Build tool. For some builds this can be cross.
      CARGO: cargo
      # When `CARGO` is set to `cross` this will be set to `--target {{matrix.target}}`.
      TARGET_FLAGS: ""
      # When `CARGO` is set to `cross` this will be set to `./target/{{matrix.target}}`.
      TARGET_DIR: ./target
      # Get backtraces on panics.
      RUST_BACKTRACE: 1
      # Turn incremental compilation off (takes extra time and does not work with ci)
      CARGO_INCREMENTAL: 0
    strategy:
      matrix:
        build: [linux, win-msvc, win32-msvc]
        include:
          - build: linux
            os: ubuntu-latest
            rust: nightly
            target: x86_64-unknown-linux-musl
          - build: win-msvc
            os: windows-latest
            rust: nightly
            target: x86_64-pc-windows-msvc
          - build: win32-msvc
            os: windows-latest
            rust: nightly
            target: i686-pc-windows-msvc
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update packages (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update -y

      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}

      - name: Setup cross
        run: |
          cargo install cross
          {
            echo "CARGO=cross"
            echo "TARGET_FLAGS=--target ${{ matrix.target }}"
            echo "TARGET_DIR=./target/${{ matrix.target }}"
          } >> "${GITHUB_ENV}"

      - name: Set crate name
        run: |
          echo "CRATE_NAME=$(grep "name" Cargo.toml | awk -F'=' '{print $2}' | tr -d ' "')" >> "${GITHUB_ENV}"

      - name: Log env
        run: |
          echo "Crate: ${{ env.CRATE_NAME }}"
          echo "Cargo: ${{ env.CARGO }}"
          echo "Target flags: ${{ env.TARGET_FLAGS }}"
          echo "Target dir: ${{ env.TARGET_DIR }}"

      - name: Build release binary
        run: |
          ${{ env.CARGO }} build --release ${{ env.TARGET_FLAGS }}

      - name: Build archive
        shell: bash
        run: |
          suffix="${{ matrix.name }}"
          staging="${{ env.CRATE_NAME }}-${suffix:-${{ matrix.target }}}"
          mkdir -p "${staging}"

          if [[ "${{ matrix.os }}" = "windows-latest" ]]; then
            echo "Archiving windows build"
            cp "${{ env.TARGET_DIR }}/release/${{ env.CRATE_NAME }}.exe" "${staging}/"
            7z a "${staging}.zip" "${staging}"
            echo "ASSET=${staging}.zip" >> "${GITHUB_ENV}"
          else
            echo "Archiving unix build"
            cp "${{ env.TARGET_DIR }}/release/${{ env.CRATE_NAME }}" "${staging}/"
            tar czf "${staging}.tar.gz" "${staging}"
            echo "ASSET=${staging}.tar.gz" >> "${GITHUB_ENV}"
          fi

      - name: Upload archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream
